const { ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, EmbedBuilder } = require("discord.js");

const units = require("../../../assets/guerre/units.json");
const fs = require("fs");
const casusbellijson = require("../../../assets/guerre/casusbelli.json")

const diplomatie = async (client, message, dbUser) => {
    if(global.users_use_guerre_cmd.indexOf(message.author.id) != -1) {
        //message.channel.send("DEBUG: " + global.users_use_guerre_cmd.join(" - "));
        return message.reply({content:`Vous √™tes d√©j√† en train d'utiliser cette commande. Si vous souhaitez relancer la commande vous devez quitter l'√©diteur dans le menu. *(Si vous pensez qu'il y a une erreur, attendez 15 minutes et r√©essayez. Si √ßa ne marche toujours pas contactez le d√©veloppeur. Romar1#8485)*`});
    } else {
        global.users_use_guerre_cmd.push(message.author.id);
    }

     /* Valeurs reelations
            0 = Neutre
            1 = Non-Agression
            2 = Commercial
            3 = Alliance
            4 = Ennemie
    */


    var selected_faction_id = 0;
    var selected_faction_string = "Epsilon"
    var selected_traite_id = 0;
    var selected_traite_string = "Non-agression"

    var factions_to_select = [];

    const e_selectFac = [
        {
            label: 'Da√Øros',
            description: 'Selectionnez la faction Da√Øros',
            value: 'slc_faction_dairos' + message.author.id,
        },
        {
            label: 'Lyomah',
            description: 'Selectionnez la faction Lyomah',
            value: 'slc_faction_lyomah' + message.author.id,
        },
        {
            label: 'Alpha',
            description: 'Selectionnez la faction Alpha',
            value: 'slc_faction_alpha' + message.author.id,
        }
    ]
    const d_selectFac = [
        {
            label: 'Epsilon',
            description: 'Selectionnez la faction Epsilon',
            value: 'slc_faction_epsilon' + message.author.id,
        },
        {
            label: 'Lyomah',
            description: 'Selectionnez la faction Lyomah',
            value: 'slc_faction_lyomah' + message.author.id,
        },
        {
            label: 'Alpha',
            description: 'Selectionnez la faction Alpha',
            value: 'slc_faction_alpha' + message.author.id,
        }
    ]
    const l_selectFac = [
        {
            label: 'Epsilon',
            description: 'Selectionnez la faction Epsilon',
            value: 'slc_faction_epsilon' + message.author.id,
        },
        {
            label: 'Da√Øros',
            description: 'Selectionnez la faction Da√Øros',
            value: 'slc_faction_dairos' + message.author.id,
        },
        {
            label: 'Alpha',
            description: 'Selectionnez la faction Alpha',
            value: 'slc_faction_alpha' + message.author.id,
        }
    ]
    const a_selectFac = [
        {
            label: 'Epsilon',
            description: 'Selectionnez la faction Epsilon',
            value: 'slc_faction_epsilon' + message.author.id,
        },
        {
            label: 'Da√Øros',
            description: 'Selectionnez la faction Da√Øros',
            value: 'slc_faction_dairos' + message.author.id,
        },
        {
            label: 'Lyomah',
            description: 'Selectionnez la faction Lyomah',
            value: 'slc_faction_lyomah' + message.author.id,
        }
    ]

    if(dbUser.faction == "epsilon") {
        factions_to_select = e_selectFac;
        selected_faction_id = 1;
        selected_faction_string = "Da√Øros"
    }
    else if(dbUser.faction == "da√Øros") {
        factions_to_select = d_selectFac;
        selected_faction_id = 0;
    }
    else if(dbUser.faction == "lyomah") {
        factions_to_select = l_selectFac;
        selected_faction_id = 0;
    }
    else if(dbUser.faction == "alpha") {
        factions_to_select = a_selectFac;
        selected_faction_id = 0;
    }

    


    var embed_diplomatieMenu = new EmbedBuilder()
        .setColor('3C4C66')
        .setAuthor({name: `${message.author.username}`, iconURL: message.author.displayAvatarURL()})
        .setTitle(`Diplomatie`)
        .addFields([{name:`**Signer ou Briser un trait√©**`, value:`Proposez diff√©rents trait√©s avec les autres factions.`, inline:true}, {name:`**D√©clarer une Guerre**`, value:`D√©clarez la guerre √† une faction pour obtenir ce que vous d√©sirez... Seulement, il faut y √™tre pr√©par√© !`, inline:true}])


    var embed_traitesMenu = new EmbedBuilder()
        .setColor('3C4C66')
        .setAuthor({name: `${message.author.username}`, iconURL: message.author.displayAvatarURL()})
        .setTitle(`Trait√©s avec ${selected_faction_string}`)
        .setDescription(`S√©lectionnez la faction avec qui vous souhaitez signer un trait√©. Choisissez le trait√© de votre choix puis cliquez sur un des boutons pour le briser ou pour envoyer la demande √† la faction en question.`)
        .addFields([
            {name:`${(selected_traite_id == 0) ? "üëâ" : ""} **Pacte de non-agression**`, value:`Signer un pacte de non-agression emp√™che deux faction de se d√©clarer la guerre. \n\nCe trait√© peut √™tre bris√© sans l'accord de la faction adverse mais vous perdrez du prestige.`, inline:true}, 
            {name:`${(selected_traite_id == 1) ? "üëâ" : ""} **Alliance**`, value:`Forger une alliance engage les deux factions √† s'entre-aider en cas de conflit avec des factions tierces. \nAucune guerre ne peut √™tre d√©clarer entre les deux. \n\nCe trait√© peut √™tre bris√© sans l'accord de la faction adverse. Mais attention, en plus d'y perdre beaucoup de prestige, votre ancien alli√© obtiendra un casus belli contre vous !`, inline:true}
        ])
        .setFooter({text:`${selected_faction_string} - ${selected_traite_string}`})

    var embed_declarerGuerreMenu = new EmbedBuilder()
        .setColor('3C4C66')
        .setAuthor({name: `${message.author.username}`, iconURL: message.author.displayAvatarURL()})
        .setTitle(`D√©clarer la guerre !`)
        .setDescription(`S√©lectionnez le casus belli (votre raison et objectif de guerre) de votre choix avec les fl√®ches et confirmez avec le bouton "D√©clarer" lorsque vous √™tes s√ªr de votre d√©cision !\n\n:warning: **Attention** :warning:\nD√©clarer une guerre ne peut √™tre annul√© sans vous rendre ou sans que l'adversaire n'accepte une paix blanche. `)
        .addFields([
            {name:`** **`, value:`** **`}, 
            {name:`** ** ‚Ä¢ Contre : ** **`, value:`** **`}, 
        ])

    //row Menu

    const rowChoixDiplomatie = new ActionRowBuilder()
        .addComponents(
        
        new ButtonBuilder()
            .setCustomId(`btntraite` + message.author.id)
            .setLabel('Signer ou Briser un trait√©')
            .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
            .setCustomId(`btndeclarerguerre` + message.author.id)
            .setLabel('D√©clarer une Guerre')
            .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
            .setCustomId(`btnquit` + message.author.id)
            .setLabel('Quitter')
            .setStyle(ButtonStyle.Danger)
    ); 


    //row trait√©s

    const selectMenu_choixFaction = new ActionRowBuilder()
			.addComponents(
				new StringSelectMenuBuilder()
					.setCustomId('selectFaction' + message.author.id)
					.setPlaceholder('Choisissez une faction...') 
					.addOptions(factions_to_select),
			);

    const selectMenu_choixTraite = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('selectTraite' + message.author.id)
                    .setPlaceholder('Choisissez un trait√©...') 
                    .addOptions(
                    {
                        label: 'Pacte de non-agression',
                        description: 'Selectionnez le pacte de non-agression',
                        value: 'slc_traite_nonagression' + message.author.id,
                    },
                    {
                        label: 'Alliance',
                        description: 'Selectionnez l\'alliance',
                        value: 'slc_traite_alliance' + message.author.id,
                    }),
        );

    const rowChoixActionTraitePeutBriser = new ActionRowBuilder()
        .addComponents(
        
        new ButtonBuilder()
            .setCustomId(`btnsigner` + message.author.id)
            .setLabel('Signer')
            .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
            .setCustomId(`btnbriser` + message.author.id)
            .setLabel('Briser')
            .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
            .setCustomId(`btnretour` + message.author.id)
            .setLabel('Retour')
            .setStyle(ButtonStyle.Secondary)
    );

    const rowChoixActionTraitePeutPasBriser = new ActionRowBuilder()
        .addComponents(
        
        new ButtonBuilder()
            .setCustomId(`btnsigner` + message.author.id)
            .setLabel('Signer')
            .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
            .setCustomId(`btnbriserfake` + message.author.id)
            .setLabel('Briser')
            .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
            .setCustomId(`btnretour` + message.author.id)
            .setLabel('Retour')
            .setStyle(ButtonStyle.Secondary)
    );

    var rowChoixActionTraite = rowChoixActionTraitePeutBriser;


    const rowChoixCasusBelli = new ActionRowBuilder()
        .addComponents(
        
        new ButtonBuilder()
            .setCustomId(`btnflechegauche` + message.author.id)
            .setLabel('ü°†')
            .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
            .setCustomId(`btnflechedroite` + message.author.id)
            .setLabel('ü°¢')
            .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
            .setCustomId(`btndeclarer` + message.author.id)
            .setLabel('D√©clarer !')
            .setStyle(ButtonStyle.Danger)
            ,
        new ButtonBuilder()
            .setCustomId(`btnretour` + message.author.id)
            .setLabel('Retour')
            .setStyle(ButtonStyle.Secondary)
    );

    var index_choix_casusBelli = 0;
    var faccasbel = await client.getFaction(dbUser.faction);






    const filter = i => (
        i.customId === 'selectTraite' + message.author.id ||
        i.customId === 'selectFaction' + message.author.id ||
        i.customId === 'btnquit' + message.author.id ||

        i.customId === 'btnsigner' + message.author.id || 
        i.customId === 'btnbriser' + message.author.id || 
        i.customId === 'btnbriserfake' + message.author.id ||
        i.customId === 'btndeclarerguerre' + message.author.id || 
        i.customId === 'btndeclarer' + message.author.id ||
        i.customId === 'btnflechedroite' + message.author.id ||
        i.customId === 'btnflechegauche' + message.author.id ||
        i.customId === 'btntraite' + message.author.id ||
        i.customId === 'btnretour' + message.author.id) && 
        i.user.id === message.author.id;
    const collector = message.channel.createMessageComponentCollector({ filter, time: 900000 }); //15 minutes

    await collector.on('collect', async i => {

        // let dbFaction = await client.getFaction(dbUser.faction);
        // //si nous n'avons pas le trait√© selectionn√© dans nos relation de la dbFaction alors on grise le "briser"
        // console.log(`[DEBUG] : ${dbFaction.relations[selected_faction_id]} != ${selected_traite_id + 1}`)
        // if(dbFaction.relations[selected_faction_id] != selected_traite_id + 1) {
            
        //     rowChoixActionTraite = rowChoixActionTraitePeutPasBriser;
        //     // await i.deferUpdate();
        //     // await i.editReply({embeds:[embed_traitesMenu], components:[selectMenu_choixFaction, selectMenu_choixTraite, rowChoixActionTraite]})
        // }


        if(i.isButton()) {

            if(i.customId == "btnquit" + i.user.id) {
                await i.deferUpdate();
                await i.editReply({components:[]});
                collector.stop();
            }

            if(i.customId == "btntraite" + i.user.id) {
                await i.deferUpdate();
                await i.editReply({embeds:[embed_traitesMenu], components:[selectMenu_choixFaction, selectMenu_choixTraite, rowChoixActionTraite]})
            }

            
            if(i.customId == "btndeclarerguerre" + i.user.id) {
                await i.deferUpdate();

                if(faccasbel.casusbelli.length <= 0) {

                    embed_declarerGuerreMenu = new EmbedBuilder()
                    .setColor('3C4C66')
                    .setAuthor({name: `${message.author.username}`, iconURL: message.author.displayAvatarURL()})
                    .setTitle(`D√©clarer la guerre !`)
                    .setDescription(`S√©lectionnez le casus belli (votre raison et objectif de guerre) de votre choix avec les fl√®ches et confirmez avec le bouton "D√©clarer" lorsque vous √™tes s√ªr de votre d√©cision !\n\n:warning: **Attention** :warning:\nD√©clarer une guerre ne peut √™tre annul√© sans vous rendre ou sans que l'adversaire n'accepte une paix blanche. `)
                    .addFields([
                        {name:`** **`, value:`** **`}, 
                        {name:`Vous ne poss√©dez aucun casus belli`, value:`** **`}, 
                    ])
                    
                    await i.editReply({embeds:[embed_declarerGuerreMenu], components:[rowChoixCasusBelli]})
                    //await i.editReply({embeds:[embed_declarerGuerreMenu], components:[selectMenu_choixFactionDeclarerGuerre, selectMenu_choixCasusBeli, rowChoixActionDeclarerGuerre]})
                

                } else {
                    embed_declarerGuerreMenu = new EmbedBuilder()
                    .setColor('3C4C66')
                    .setAuthor({name: `${message.author.username}`, iconURL: message.author.displayAvatarURL()})
                    .setTitle(`D√©clarer la guerre !`)
                    .setDescription(`S√©lectionnez le casus belli (votre raison et objectif de guerre) de votre choix avec les fl√®ches et confirmez avec le bouton "D√©clarer" lorsque vous √™tes s√ªr de votre d√©cision !\n\n:warning: **Attention** :warning:\nD√©clarer une guerre ne peut √™tre annul√© sans vous rendre ou sans que l'adversaire n'accepte une paix blanche. `)
                    .addFields([
                        {name:`** **`, value:`** **`}, 
                        {name:`${casusbellijson[faccasbel.casusbelli[index_choix_casusBelli].id].name} ‚Ä¢ Contre : **${faccasbel.casusbelli[index_choix_casusBelli].cible.charAt(0).toUpperCase() + faccasbel.casusbelli[index_choix_casusBelli].cible.slice(1)}**`, value:`${casusbellijson[faccasbel.casusbelli[index_choix_casusBelli].id].description}`}, 
                    ])
                    
                    await i.editReply({embeds:[embed_declarerGuerreMenu], components:[rowChoixCasusBelli]})
                    //await i.editReply({embeds:[embed_declarerGuerreMenu], components:[selectMenu_choixFactionDeclarerGuerre, selectMenu_choixCasusBeli, rowChoixActionDeclarerGuerre]})
                
                }

            }

            

            if(i.customId == "btnretour" + i.user.id) {
                await i.deferUpdate();
                await i.editReply({embeds:[embed_diplomatieMenu], components:[rowChoixDiplomatie]})
            }

            if(i.customId == "btnbriserfake" + i.user.id) {
                await i.reply({content:`Vous n'avez pas de trait√© √† briser avec cette faction.`, ephemeral:true})
            }




            // --- debut btnsigner ---
            if(i.customId == "btnsigner" + i.user.id) {
                await i.deferUpdate();

                const factionCible = await client.getFaction(selected_faction_string.toLowerCase());
                const faction = await client.getFaction(dbUser.faction);

                if(selected_traite_id == 0 && factionCible.relations[faction.factionid] != 0) //non-agression que si on est neutre 
                {
                    message.reply("La faction cible n'est pas neutre. Un pacte de non-agression ne peut √™tre sign√©e si vous poss√©dez un trait√© plus puissant ou si vous √™tes en guerre avec la faction cible.")
                    collector.stop();
                    return;
                } 
                else if(selected_traite_id == 1) //alliance
                {
                    //on peut alliance que si l'on est pas ennemie ou d√©j√† alli√©
                    if(factionCible.relations[faction.factionid] == 3) {
                        message.reply("La faction cible est d√©j√† votre alli√©e. Une alliance ne peut donc pas √™tre sign√©e √† nouveau.")
                        collector.stop();
                        return;
                    } else if(factionCible.relations[faction.factionid] == 4) {
                        message.reply("La faction cible est votre ennemie. Une alliance ne peut donc pas √™tre sign√©e tant que vous serez en guerre.")
                        collector.stop();
                        return;
                    }
                }

                if(factionCible.idmaitre == "") {
                    message.reply("La faction cible n'a pas de ma√Ætre. Aucun trait√© ne peut √™tre sign√©.")
                    collector.stop();
                    return;
                } else {


                    const rowChoixSigner = new ActionRowBuilder()
                    .addComponents(
                    
                    new ButtonBuilder()
                        .setCustomId(`btnaccepter` + factionCible.idmaitre)
                        .setLabel('Accepter')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId(`btnrefuser` + factionCible.idmaitre)
                        .setLabel('Refuser')
                        .setStyle(ButtonStyle.Danger)
                    );

                    const filterSigner = i2 => (
                        i2.customId === 'btnaccepter' + factionCible.idmaitre ||
                        i2.customId === 'btnrefuser' + factionCible.idmaitre) && 
                        i2.user.id === factionCible.idmaitre;
                    const collectorSigner = message.channel.createMessageComponentCollector({ filterSigner, time: 60000 }); //1 minutes
                
                    let message_demande = message.channel.send({content:`<@${factionCible.idmaitre}> la faction ${dbUser.faction} souhaite √©tablir une ${selected_traite_string}.`, components:[rowChoixSigner]})
                        //console.log("i.user.id = " + i2.user.id)

                    await collectorSigner.on('collect', async i2 => {
                        console.log("i.user.id = " + i2.user.id)

                        if(i2.isButton()) {
                            if(i2.customId == "btnaccepter" + i2.user.id) {
                                i2.deferUpdate();
                                
                                message.reply(`La demande a √©t√© accepter ! Les factions ${dbUser.faction.charAt(0).toUpperCase() + dbUser.faction.slice(1)} et ${factionCible.displayname} ont sign√© ${(selected_traite_id == 0) ? "un pacte de non-agression" : "une alliance" }.`)
                                

                                

                                let arrayTmp = faction.relations;
                                let arrayTmpFactionCible = factionCible.relations;


                                if(selected_traite_id == 0) { //non-aggression
                                    arrayTmp[factionCible.factionid] = 1;
                                    arrayTmpFactionCible[faction.factionid] = 1;
                                } 
                                else if(selected_traite_id == 1) { //alliance
                                    arrayTmp[factionCible.factionid] = 3;
                                    arrayTmpFactionCible[faction.factionid] = 3;
                                }

                                //console.log("selectedTraiteId = " + selected_traite_id + "\n ArrayTMP = " + arrayTmp);


                                await client.updateFaction(dbUser.faction, {relations: arrayTmp})
                                await client.updateFaction(factionCible.name, {relations: arrayTmpFactionCible})

                                
                                collectorSigner.stop();
                                collector.stop();
                                return;
                            }
                            if(i2.customId == "btnrefuser" + i2.user.id) {
                                i2.deferUpdate();
                                collectorSigner.stop();
                                message.reply("La demande a √©t√© rejeter.")
                                collector.stop();
                            }
                        }
                    });


                }

            }

            // --- fin btnsigner ---








            if(i.customId == "btnbriser" + i.user.id) {

                await i.deferUpdate();

                const factionCible = await client.getFaction(selected_faction_string.toLowerCase());
                const faction = await client.getFaction(dbUser.faction);

                if(selected_traite_id == 0 && factionCible.relations[faction.factionid] != 1) //check si on a non-agression vraiment
                {
                    await i.reply({content:`Vous ne poss√©dez pas de pacte de non-agression avec cette faction.`, ephemeral:true})
                    //collector.stop();
                    //return;
                } 
                else if(selected_traite_id == 1 && factionCible.relations[faction.factionid] != 3) //alliance
                {
                    await i.reply({content:`Vous ne poss√©dez pas d'alliance avec cette faction.`, ephemeral:true})
                    //collector.stop();
                    //return;
                    
                } else {

                    const rowChoixBriser = new ActionRowBuilder()
                    .addComponents(
                    
                    new ButtonBuilder()
                        .setCustomId(`btnoui` + message.author.id)
                        .setLabel('Oui')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId(`btnnon` + message.author.id)
                        .setLabel('Non')
                        .setStyle(ButtonStyle.Danger)
                    );

                    const filterSigner = i3 => (
                        i3.customId === 'btnoui' + message.author.id ||
                        i3.customId === 'btnnon' + message.author.id) && 
                        i3.user.id === message.author.id;
                    const collectorBriser = message.channel.createMessageComponentCollector({ filterSigner, time: 60000 }); //1 minutes
                
                    let message_confirmation = message.channel.send({content:`Voulez-vous vraiment briser votre ${selected_traite_string} avec ${factionCible.name} ?`, components:[rowChoixBriser]})
                        //console.log("i.user.id = " + i2.user.id)

                    await collectorBriser.on('collect', async i3 => { 
                        if(i3.isButton()) {
                            if(i3.customId == "btnoui" + i3.user.id) {
                                //faire les trucs
                                i3.deferUpdate();
                                message.reply(`Votre ${selected_traite_string} avec ${factionCible.name} est maintenant bris√©(e) ! ${(selected_traite_id == 1) ? `\nLa faction ${factionCible.name} poss√®de d√©sormais un casus beli contre votre faction ! \nVous avez **perdu 1500** points de **prestige** et gagn√© **200** points de **redoutabilit√©**` : "Vous avez **perdu 500** points de **prestige** et gagn√© **25** points de **redoutabilit√©** !"}`)
                                
                                let arrayTmp = faction.relations;
                                let arrayTmpFactionCible = factionCible.relations;


                                if(selected_traite_id == 0) { //non-aggression
                                    arrayTmp[factionCible.factionid] = 0;
                                    arrayTmpFactionCible[faction.factionid] = 0;

                                    await client.editPoint(client, message.member, -500, "prestige");
                                    await client.editPoint(client, message.member, 25, "redoutabilite");
                                } 


                                else if(selected_traite_id == 1) { //alliance
                                    arrayTmp[factionCible.factionid] = 0;
                                    arrayTmpFactionCible[faction.factionid] = 0;

                                    await client.editPoint(client, message.member, -1500, "prestige");
                                    await client.editPoint(client, message.member, 200, "redoutabilite");

                                    await client.addCasusBelli(factionCible, faction, "1");
                                }


                                await client.updateFaction(dbUser.faction, {relations: arrayTmp})
                                await client.updateFaction(factionCible.name, {relations: arrayTmpFactionCible})

                                

                               




                                collectorBriser.stop();
                                collector.stop();
                            }
                            if(i3.customId == "btnnon" + i3.user.id) {
                                await i.reply({content:`Votre ${selected_traite_string} n'a pas √©t√© bris√©.`, ephemeral:true})
                                collectorBriser.stop();
                            }
                        }
                    });
                }
            }

            

        }
        if(i.isStringSelectMenu()) {
            if(i.customId == "selectFaction" + i.user.id) {
                
                if(i.values == "slc_faction_epsilon" + i.user.id) {
                    selected_faction_id = 0;
                    selected_faction_string = "Epsilon";
                } else if(i.values == "slc_faction_dairos" + i.user.id) {
                    selected_faction_id = 1;
                    selected_faction_string = "Da√Øros";
                } else if(i.values == "slc_faction_lyomah" + i.user.id) {
                    selected_faction_id = 2;
                    selected_faction_string = "Lyomah";
                } else if(i.values == "slc_faction_alpha" + i.user.id) {
                    selected_faction_id = 3;
                    selected_faction_string = "Alpha";
                }
            }
            else if(i.customId == "selectTraite" + i.user.id) {
                
                if(i.values == "slc_traite_nonagression" + i.user.id) {
                    selected_traite_id = 0;
                    selected_traite_string = "Non-agression";
                } else if(i.values == "slc_traite_alliance" + i.user.id) {
                    selected_traite_id = 1;
                    selected_traite_string = "Alliance";
                }
            }

            embed_traitesMenu = new EmbedBuilder()
            .setColor('3C4C66')
            .setAuthor({name: `${message.author.username}`, iconURL: message.author.displayAvatarURL()})
            .setTitle(`Trait√©s avec ${selected_faction_string}`)
            .setDescription(`S√©lectionnez la faction avec qui vous souhaitez signer un trait√©. Choisissez le trait√© de votre choix puis cliquez sur un des boutons pour le briser ou pour envoyer la demande √† la faction en question.`)
            .addFields([
                {name:`${(selected_traite_id == 0) ? "üëâ" : ""} **Pacte de non-agression**`, value:`Signer un pacte de non-agression emp√™che deux faction de se d√©clarer la guerre. \n\nCe trait√© peut √™tre bris√© sans l'accord de la faction adverse mais vous perdrez du prestige.`, inline:true}, 
                {name:`${(selected_traite_id == 1) ? "üëâ" : ""} **Alliance**`, value:`Forger une alliance engage les deux factions √† s'entre-aider en cas de conflit avec des factions tierces. \nAucune guerre ne peut √™tre d√©clarer entre les deux. \n\nCe trait√© peut √™tre bris√© sans l'accord de la faction adverse. Mais attention, en plus d'y perdre beaucoup de prestige, votre ancien alli√© obtiendra un casus belli contre vous !`, inline:true}
            ])
            .setFooter({text:`${selected_faction_string} - ${selected_traite_string}`})
                
                await i.deferUpdate();
                await i.editReply({embeds:[embed_traitesMenu]})

        }

        // --- FIN Trait√©s ---






        
        // Declarer Guerre

       

            if(i.isButton()) {

                if(faccasbel.casusbelli.length <= 0) {
                    //rien
                } else {

                    


                    if(i.customId == "btnflechegauche" + i.user.id) {

                        
                        
                        if(index_choix_casusBelli == 0) {
                            index_choix_casusBelli = faccasbel.casusbelli.length - 1;
                        } else {
                            index_choix_casusBelli--;
                        }

                        //securit√©
                        if(index_choix_casusBelli < 0) 
                                index_choix_casusBelli = 0;
                        

                        embed_declarerGuerreMenu = new EmbedBuilder()
                        .setColor('3C4C66')
                        .setAuthor({name: `${message.author.username}`, iconURL: message.author.displayAvatarURL()})
                        .setTitle(`D√©clarer la guerre !`)
                        .setDescription(`S√©lectionnez le casus belli (votre raison et objectif de guerre) de votre choix avec les fl√®ches et confirmez avec le bouton "D√©clarer" lorsque vous √™tes s√ªr de votre d√©cision !\n\n:warning: **Attention** :warning:\nD√©clarer une guerre ne peut √™tre annul√© sans vous rendre ou sans que l'adversaire n'accepte une paix blanche. `)
                        .addFields([
                            {name:`** **`, value:`** **`}, 
                            {name:`${casusbellijson[faccasbel.casusbelli[index_choix_casusBelli].id].name} ‚Ä¢ Contre : **${faccasbel.casusbelli[index_choix_casusBelli].cible.charAt(0).toUpperCase() + faccasbel.casusbelli[index_choix_casusBelli].cible.slice(1)}**`, value:`${casusbellijson[faccasbel.casusbelli[index_choix_casusBelli].id].description}`}, 
                        ])

                        await i.deferUpdate();
                        await i.editReply({embeds:[embed_declarerGuerreMenu]});
                    }

                    if(i.customId == "btnflechedroite" + i.user.id) {

                        if(index_choix_casusBelli == faccasbel.casusbelli.length - 1) {
                            index_choix_casusBelli = 0;
                        } else {
                            index_choix_casusBelli++;
                        }


                        //securit√©
                        if(index_choix_casusBelli >= faccasbel.casusbelli.length) 
                                index_choix_casusBelli = 0;
                        
                            
                        embed_declarerGuerreMenu = new EmbedBuilder()
                        .setColor('3C4C66')
                        .setAuthor({name: `${message.author.username}`, iconURL: message.author.displayAvatarURL()})
                        .setTitle(`D√©clarer la guerre !`)
                        .setDescription(`S√©lectionnez le casus belli (votre raison et objectif de guerre) de votre choix avec les fl√®ches et confirmez avec le bouton "D√©clarer" lorsque vous √™tes s√ªr de votre d√©cision !\n\n:warning: **Attention** :warning:\nD√©clarer une guerre ne peut √™tre annul√© sans vous rendre ou sans que l'adversaire n'accepte une paix blanche. `)
                        .addFields([
                            {name:`** **`, value:`** **`}, 
                            {name:`${casusbellijson[faccasbel.casusbelli[index_choix_casusBelli].id].name} ‚Ä¢ Contre : **${faccasbel.casusbelli[index_choix_casusBelli].cible.charAt(0).toUpperCase() + faccasbel.casusbelli[index_choix_casusBelli].cible.slice(1)}**`, value:`${casusbellijson[faccasbel.casusbelli[index_choix_casusBelli].id].description}`}, 
                        ])

                        await i.deferUpdate();
                        await i.editReply({embeds:[embed_declarerGuerreMenu]});

                    }

                    if(i.customId == "btndeclarer" + i.user.id) {

                        //* En Alpha, on ne peut pas g√©rer plusieurs guerres en m√™me temps. Mais dans le futur, il sera tr√®s probable que l'on puisse √™tre en guerre avec
                        //* Plus d'une faction √† la fois. se battre sur plusieurs front pourrait √™tre int√©ressant, dangereux mais un gameplay cool !

                        //* TODO: Voir si on permet √† une faction de faire la guerre √† une faction qui ne poss√®de pas de ma√Ætre de faction.
                        //! IL FAUT ABSOLUMENT PAS QU'ON PUISSE (en tout cas en alpha !!)
                        // * CE TODO A ETE FAIT
                        //*FAIT TODO: CE TODO LA N'A PAS ETE FAIT. Draxy avec Da√Øros √† bien pu d√©clarer la guerre m√™me si j'√©tais en guerre avec Lyomah.
                        // * DERNIERE MAJ : C'est bon corrig√© en ajoutant une condition qui v√©rifie si la faction cible est pas d√©j√† en state 4

                        if(faccasbel.relations.indexOf(4) != -1) {
                            i.reply({content:`Vous √™tes d√©j√† en guerre contre une faction !`, ephemeral:true})
                            //collector.stop();
                        } else {
                            
                            const faction_ennemy = await client.getFaction(faccasbel.casusbelli[index_choix_casusBelli].cible);

                            if(faction_ennemy.idmaitre == "") {
                                i.reply({content:`La faction adverse n'a aucun ma√Ætre qui gouverne. Il est donc impossible de lui d√©clarer la guerre.`});
                            } else {
                                if(faccasbel.relations[faction_ennemy.factionid] != 0) { //si la faction cible n'est PAS neutre AVEC NOUS
                                    i.reply({content:`Vous poss√©dez un trait√© avec cette faction. Tant qu'il ne sera pas bris√© vous ne pourrait pas d√©clarer la guerre √† cette faction !`, ephemeral:true})
                                    //collector.stop();
                                } else if(faction_ennemy.relations.indexOf(4) != -1) { //chercher si la faction cible √† pas une relation 4 (donc en guerre). Si elle en a (donc PAS -1) on emp√™che
                                    i.reply({content:`Vous ne pouvez pas d√©clarer la guerre √† cette faction. Elle est actuellement en guerre avec une autre faction.`, ephemeral:true})
                                } else {
                                    let temp_relations_facenn = faction_ennemy.relations;
                                    let temps_relations_fac = faccasbel.relations;
        
                                    temp_relations_facenn[faccasbel.factionid] = 4;
                                    temps_relations_fac[faction_ennemy.factionid] = 4;
        
                                    await client.updateFaction(faction_ennemy.name, {relations:temp_relations_facenn});
                                    await client.updateFaction(faccasbel.name, {relations:temps_relations_fac});
    
                                    await client.updateFaction(faction_ennemy.name, {en_guerre:true});
                                    await client.updateFaction(faccasbel.name, {en_guerre:true});
    
                                    await client.updateFaction(faction_ennemy.name, {attaquant:faccasbel.name});
                                    await client.updateFaction(faccasbel.name, {attaquant:faccasbel.name});
    
                                    await client.updateFaction(faction_ennemy.name, {defensseur:faction_ennemy.name});
                                    await client.updateFaction(faccasbel.name, {defensseur:faction_ennemy.name});
    
                                    await client.updateFaction(faction_ennemy.name, {casusbelli_utilise:faccasbel.casusbelli[index_choix_casusBelli].id});
                                    await client.updateFaction(faccasbel.name, {casusbelli_utilise:faccasbel.casusbelli[index_choix_casusBelli].id});

                                    await client.updateFaction(faction_ennemy.name, {date_debut_guerre: new Date()})
                                    await client.updateFaction(faccasbel.name, {date_debut_guerre: new Date()})
        
                                    i.deferUpdate();
                                    message.reply({content:`:crossed_swords: La guerre est d√©clar√©e entre ${faccasbel.displayname} et ${faction_ennemy.displayname}`});
                                    //TODO envoyer √ßa dans le d√©cision_rpg
                                    collector.stop();
                                }
                            }
                            
                            
                        }

                        //! NB : C'est pas l√† que le casus belli est supprim√© ! Il n'est supprim√© qu'apr√®s. Au cas o√π on fait une paix blanche il est gard√© !
                    }

                    
                }    
            }
            

            

        // --- FIN D√©clarer Guerre ---
    });

    await collector.on('end', async i => {
        global.users_use_guerre_cmd[global.users_use_guerre_cmd.indexOf(message.author.id)] = "";
        return;
    });

    


    message.channel.send({embeds:[embed_diplomatieMenu], components:[rowChoixDiplomatie]})
    //message.channel.send({embeds:[embed_traitesMenu], components:[selectMenu_choixFaction, selectMenu_choixTraite, rowChoixActionTraite]})

        
}

module.exports = {
    diplomatie
}